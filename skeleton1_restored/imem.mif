-- Copyright (C) 1991-2009 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any /Users/liuxiaodong/Documents/550/project4/mif_new.txt
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.

-- Quartus II generated Memory Initialization File (.mif)

WIDTH=32;
DEPTH=4096;

ADDRESS_RADIX=HEX;
DATA_RADIX=BIN;

CONTENT BEGIN
000: 01110000110000000000000000000000;--input $r3 .keyboard_in(ps2_out)                      
001: 00110010100000000000000001000001;--addi $r10,$r0,65 left  
002: 00110010110000000000000001000100;--addi $r11,$r0,68 right
003: 00110011000000000000000000100000;--addi $r12,$r0,32 space
004: 00110011010000000000000001010011;--addi $r13,$r0,83 down
005: 01001000110101000000000000000110;--beq $r3, $r10, 009
006: 01001000110101100000000000001000;--beq $r3, $r11, 00C
007: 01001000110110000000000000001010;--beq $r3, $r12, 00F
008: 01001000110110100000000000001100;--beq $r3, $r13, 015
009: 00110001000000000000000000000000;--addi $r4, $r0, 0000
00A: 01111001000000000000000000000000;--output $r4
00B: 01100000000000000000000000000000;--j 000
00C: 00110001000000000000000000000001;--addi $r4,$r0,0001
00D: 01111001000000000000000000000000;--output $r4
00E: 01100000000000000000000000000000;--j 000
00F: 00110001000000000000000000000010;--addi $r4,$r0,0010
010: 01111001000000000000000000000000;--output $r4 
011: 01100000000000000000000000000000;--j 000
012: 00110001000000000000000000000100;--addi $r4,$r0,0100
013: 01111001000000000000000000000000;--output $r4
014: 01100000000000000000000000000000;--j 000
015: 00110001000000000000000000001000;--addi $r4,$r0,1000
016: 01111001000000000000000000000000;--output $r4
017: 01100000000000000000000000000000;--j 000
[018..0FFF]: 00000000000000000000000000000000;
END;